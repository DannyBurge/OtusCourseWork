plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.dagger.hilt)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.detekt)
}

android {
    namespace 'com.otuscoursework.ui'
    compileSdk libs.versions.compileSdk.get() as Integer

    defaultConfig {
        minSdk libs.versions.minSdk.get() as Integer
        targetSdk libs.versions.targetSdk.get() as Integer

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = libs.versions.jvmVersion.get()
    }
}

dependencies {
    implementation project(':source:resource')
    implementation project(':source:utils_n_ext')
    implementation project(':source:network')
    implementation project(':source:cart_keeper')
    implementation project(':source:security')

    //AndroidX
    implementation libs.bundles.androidx

    // Dagger Hilt
    implementation libs.hilt.android
    kapt libs.hilt.compiler

    // Coroutines
    implementation libs.bundles.coroutines

    // lifecycle
    implementation libs.bundles.lifecycle

    // Material Design Components
    implementation libs.android.material

    // Navigation
    implementation libs.navigation.fragment
    implementation libs.navigation.ui

    // AdapterDelegates
    implementation libs.adapterdelegates

    // Navigation Cicerone
    implementation libs.navigation.cicerone

    // Picasso
    implementation libs.bundles.picasso

    //Biometric
    implementation libs.security.biometric

    testImplementation libs.test.junit
    api libs.test.mockito.core
    testImplementation libs.test.mockito.inline
    testImplementation libs.test.coreTesting
    testImplementation libs.test.coroutines

    detektPlugins libs.detekt.formatting
}

detekt {
    config = files("$rootDir/config/detekt/detekt.yml")
    buildUponDefaultConfig = true
    ignoreFailures = true
}